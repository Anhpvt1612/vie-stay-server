const nodemailer = require("nodemailer");
const {
  REPORT_RESPONSE_TEMPLATE,
} = require("../templates/emailTemplates");

class EmailService {
  constructor() {
    this.transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.AUTH_EMAIL,
        pass: process.env.AUTH_PASSWORD,
      },
    });
  }

  // Template cho email y√™u c·∫ßu k√Ω h·ª£p ƒë·ªìng
  generateContractSigningTemplate(data) {
    const {
      tenantName,
      landlordName,
      roomName,
      accommodationName,
      amount,
      transactionId,
      signingUrl,
      startDate,
      monthlyRent,
    } = data;

    return `
<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>K√Ω h·ª£p ƒë·ªìng thu√™ nh√†</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 600px;
      margin: 0 auto;
      padding: 20px;
    }
    .header {
      background: linear-gradient(to right, #4CAF50, #45a049);
      padding: 20px;
      text-align: center;
      color: white;
      border-radius: 5px 5px 0 0;
    }
    .content {
      background-color: #f9f9f9;
      padding: 20px;
      border-radius: 0 0 5px 5px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .button {
      display: inline-block;
      background-color: #4CAF50;
      color: white;
      padding: 15px 30px;
      text-decoration: none;
      border-radius: 5px;
      font-weight: bold;
      margin: 20px 0;
      font-size: 16px;
    }
    .details {
      background: white;
      padding: 15px;
      margin: 15px 0;
      border-radius: 5px;
      border-left: 4px solid #4CAF50;
    }
    .footer {
      text-align: center;
      margin-top: 20px;
      color: #888;
      font-size: 0.8em;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>üìù Vui l√≤ng k√Ω h·ª£p ƒë·ªìng thu√™ nh√†</h1>
  </div>
  
  <div class="content">
    <p>Xin ch√†o <strong>${tenantName}</strong>,</p>
    
    <p>Thanh to√°n ti·ªÅn c·ªçc c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n. Vui l√≤ng ho√†n t·∫•t qu√° tr√¨nh b·∫±ng c√°ch k√Ω h·ª£p ƒë·ªìng thu√™ nh√† qua li√™n k·∫øt d∆∞·ªõi ƒë√¢y.</p>
    
    <div class="details">
      <h4>üìã Th√¥ng tin h·ª£p ƒë·ªìng:</h4>
      <ul>
        <li><strong>Ph√≤ng:</strong> ${roomName}</li>
        <li><strong>T√≤a nh√†:</strong> ${accommodationName}</li>
        <li><strong>Ng√†y b·∫Øt ƒë·∫ßu thu√™:</strong> ${new Date(startDate).toLocaleDateString("vi-VN")}</li>
        <li><strong>Gi√° thu√™ c∆° b·∫£n:</strong> ${new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(monthlyRent)}/th√°ng</li>
        <li><strong>Ti·ªÅn c·ªçc:</strong> ${new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(amount)}</li>
        <li><strong>M√£ giao d·ªãch:</strong> ${transactionId}</li>
      </ul>
    </div>
    
    <div style="text-align: center;">
      <a href="${signingUrl}" class="button">
        ‚úÖ K√Ω h·ª£p ƒë·ªìng ngay
      </a>
    </div>
    
    <p><strong>L∆∞u √Ω:</strong> Vui l√≤ng k√Ω h·ª£p ƒë·ªìng trong v√≤ng 48 gi·ªù ƒë·ªÉ ho√†n t·∫•t quy tr√¨nh thu√™ nh√†.</p>
    
    <p>N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email ho·∫∑c hotline.</p>
    
    <p>Tr√¢n tr·ªçng,<br><strong>ƒê·ªôi ng≈© Vie Stay</strong></p>
  </div>
  
  <div class="footer">
    <p>ƒê√¢y l√† email t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.</p>
    <p>¬© ${new Date().getFullYear()} Vie Stay. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
  </div>
</body>
</html>
    `;
  }

  // Template cho email x√°c nh·∫≠n h·ª£p ƒë·ªìng
  generateAgreementConfirmationTemplate(data) {
    const {
      tenantName,
      landlordName,
      roomName,
      accommodationName,
      monthlyRent,
      deposit,
      startDate,
      confirmationToken,
      baseUrl,
      utilityRates,
      additionalFees,
    } = data;

    const confirmationLink = `${baseUrl}/agreement/confirm/${confirmationToken}`;

    // T√≠nh t·ªïng chi ph√≠ h√†ng th√°ng
    let totalMonthlyCost = monthlyRent;
    let utilityInfo = "";

    if (utilityRates) {
      if (utilityRates.water && utilityRates.water.type === "fixed") {
        totalMonthlyCost += utilityRates.water.rate;
        utilityInfo += `<li>N∆∞·ªõc: ${new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(utilityRates.water.rate)}/th√°ng (c·ªë ƒë·ªãnh)</li>`;
      } else if (utilityRates.water) {
        utilityInfo += `<li>N∆∞·ªõc: ${new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(utilityRates.water.rate)}/m¬≥</li>`;
      }

      if (
        utilityRates.electricity &&
        utilityRates.electricity.type === "fixed"
      ) {
        totalMonthlyCost += utilityRates.electricity.rate;
        utilityInfo += `<li>ƒêi·ªán: ${new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(utilityRates.electricity.rate)}/th√°ng (c·ªë ƒë·ªãnh)</li>`;
      } else if (utilityRates.electricity) {
        utilityInfo += `<li>ƒêi·ªán: ${new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(utilityRates.electricity.rate)}/kWh</li>`;
      }

      if (utilityRates.internet && utilityRates.internet.rate) {
        totalMonthlyCost += utilityRates.internet.rate;
        utilityInfo += `<li>Internet: ${new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(utilityRates.internet.rate)}/th√°ng</li>`;
      }

      if (utilityRates.sanitation && utilityRates.sanitation.rate) {
        totalMonthlyCost += utilityRates.sanitation.rate;
        utilityInfo += `<li>V·ªá sinh: ${new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(utilityRates.sanitation.rate)}/th√°ng</li>`;
      }
    }

    // Th√¥ng tin ph√≠ b·ªï sung
    let additionalFeesInfo = "";
    if (additionalFees && additionalFees.length > 0) {
      additionalFees.forEach((fee) => {
        if (fee.type === "monthly") {
          totalMonthlyCost += fee.amount;
        }
        const feeTypeName = {
          parking: "G·ª≠i xe",
          security: "B·∫£o v·ªá",
          maintenance: "B·∫£o tr√¨",
          cleaning: "D·ªçn d·∫πp",
          other: "Kh√°c",
        };
        additionalFeesInfo += `<li>${feeTypeName[fee.name] || fee.name}: ${new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(fee.amount)}${fee.type === "monthly" ? "/th√°ng" : " (m·ªôt l·∫ßn)"}</li>`;
      });
    }

    return `
<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>X√°c nh·∫≠n h·ª£p ƒë·ªìng thu√™ nh√†</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 600px;
      margin: 0 auto;
      padding: 20px;
    }
    .header {
      background: linear-gradient(to right, #4CAF50, #45a049);
      padding: 20px;
      text-align: center;
      color: white;
      border-radius: 5px 5px 0 0;
    }
    .content {
      background-color: #f9f9f9;
      padding: 20px;
      border-radius: 0 0 5px 5px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .button {
      display: inline-block;
      background-color: #4CAF50;
      color: white;
      padding: 15px 30px;
      text-decoration: none;
      border-radius: 5px;
      font-weight: bold;
      margin: 20px 0;
      font-size: 16px;
    }
    .details {
      background: white;
      padding: 20px;
      margin: 15px 0;
      border-radius: 8px;
      border-left: 4px solid #4CAF50;
    }
    .warning {
      background: #fff3cd;
      border: 1px solid #ffeaa7;
      padding: 15px;
      border-radius: 5px;
      margin: 15px 0;
    }
    .cost-breakdown {
      background: #e8f5e8;
      padding: 15px;
      border-radius: 5px;
      margin: 15px 0;
    }
    .footer {
      text-align: center;
      margin-top: 20px;
      color: #888;
      font-size: 0.8em;
    }
    ul {
      margin: 10px 0;
      padding-left: 20px;
    }
    .highlight {
      color: #4CAF50;
      font-weight: bold;
      font-size: 18px;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>üéâ Y√™u c·∫ßu thu√™ nh√† ƒë∆∞·ª£c ch·∫•p nh·∫≠n!</h1>
  </div>
  
  <div class="content">
    <p>Xin ch√†o <strong>${tenantName}</strong>,</p>
    
    <p>Ch√∫c m·ª´ng! Y√™u c·∫ßu thu√™ nh√† c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c <strong>${landlordName}</strong> ch·∫•p nh·∫≠n.</p>
    
    <div class="details">
      <h3>üìã Chi ti·∫øt h·ª£p ƒë·ªìng thu√™ nh√†:</h3>
      <ul>
        <li><strong>Ph√≤ng:</strong> ${roomName}</li>
        <li><strong>T√≤a nh√†:</strong> ${accommodationName}</li>
        <li><strong>Th·ªùi gian thu√™: B·∫Øt ƒë·∫ßu t·ª´</strong> ${new Date(startDate).toLocaleDateString("vi-VN")} </li>
        <li><strong>Gi√° thu√™ c∆° b·∫£n:</strong> ${new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(monthlyRent)}/th√°ng</li>
        <li><strong>Ti·ªÅn c·ªçc:</strong> ${new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(deposit)}</li>
      </ul>
    </div>

    ${
      utilityInfo
        ? `
    <div class="cost-breakdown">
      <h4>‚ö° Chi ph√≠ ti·ªán √≠ch:</h4>
      <ul>${utilityInfo}</ul>
    </div>
    `
        : ""
    }

    ${
      additionalFeesInfo
        ? `
    <div class="cost-breakdown">
      <h4>üí∞ Ph√≠ b·ªï sung:</h4>
      <ul>${additionalFeesInfo}</ul>
    </div>
    `
        : ""
    }

    <div class="cost-breakdown">
      <h4>üìä T·ªïng chi ph√≠ h√†ng th√°ng (∆∞·ªõc t√≠nh):</h4>
      <p class="highlight">${new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(totalMonthlyCost)}</p>
      <small>* Ch∆∞a bao g·ªìm c√°c chi ph√≠ ti·ªán √≠ch theo s·ª≠ d·ª•ng th·ª±c t·∫ø</small>
    </div>

    <div class="warning">
      <p><strong>‚ö†Ô∏è C√°c b∆∞·ªõc ti·∫øp theo:</strong></p>
      <ol>
        <li><strong>B∆∞·ªõc 1:</strong> X√°c nh·∫≠n h·ª£p ƒë·ªìng b·∫±ng c√°ch click v√†o n√∫t b√™n d∆∞·ªõi</li>
        <li><strong>B∆∞·ªõc 2:</strong> Thanh to√°n ti·ªÅn c·ªçc ƒë·ªÉ ƒë·∫£m b·∫£o ph√≤ng</li>
        <li><strong>B∆∞·ªõc 3:</strong> H·ª£p ƒë·ªìng s·∫Ω c√≥ hi·ªáu l·ª±c sau khi thanh to√°n th√†nh c√¥ng</li>
      </ol>
      <p><strong>L∆∞u √Ω:</strong> B·∫°n c√≥ 48 gi·ªù ƒë·ªÉ ho√†n t·∫•t qu√° tr√¨nh n√†y. Sau th·ªùi gian ƒë√≥, y√™u c·∫ßu s·∫Ω t·ª± ƒë·ªông h·∫øt h·∫°n.</p>
    </div>

    <div style="text-align: center;">
      <a href="${confirmationLink}" class="button">
        ‚úÖ X√°c nh·∫≠n h·ª£p ƒë·ªìng ngay
      </a>
    </div>

    <p>N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o v·ªÅ h·ª£p ƒë·ªìng ho·∫∑c c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email ho·∫∑c hotline.</p>
    
    <p>Tr√¢n tr·ªçng,<br><strong>ƒê·ªôi ng≈© Vie Stay</strong></p>
  </div>
  
  <div class="footer">
    <p>ƒê√¢y l√† email t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.</p>
    <p>¬© ${new Date().getFullYear()} Vie Stay. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
  </div>
</body>
</html>
    `;
  }

  // Template email thanh to√°n th√†nh c√¥ng
  generatePaymentSuccessTemplate(data) {
    const {
      tenantName,
      amount,
      transactionId,
      roomName,
      accommodationName,
      startDate,
      landlordContact,
    } = data;

    return `
<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Thanh to√°n th√†nh c√¥ng</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 600px;
      margin: 0 auto;
      padding: 20px;
    }
    .header {
      background: linear-gradient(to right, #4CAF50, #45a049);
      padding: 20px;
      text-align: center;
      color: white;
      border-radius: 5px 5px 0 0;
    }
    .content {
      background-color: #f9f9f9;
      padding: 20px;
      border-radius: 0 0 5px 5px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .success-box {
      background: #d4edda;
      border: 1px solid #c3e6cb;
      color: #155724;
      padding: 15px;
      border-radius: 5px;
      margin: 15px 0;
      text-align: center;
    }
    .details {
      background: white;
      padding: 15px;
      margin: 15px 0;
      border-radius: 5px;
    }
    .footer {
      text-align: center;
      margin-top: 20px;
      color: #888;
      font-size: 0.8em;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>üí∞ Thanh to√°n th√†nh c√¥ng!</h1>
  </div>
  
  <div class="content">
    <p>Xin ch√†o <strong>${tenantName}</strong>,</p>
    
    <div class="success-box">
      <h3>‚úÖ Thanh to√°n ti·ªÅn c·ªçc th√†nh c√¥ng!</h3>
      <p>H·ª£p ƒë·ªìng thu√™ nh√† c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.</p>
    </div>
    
    <div class="details">
      <h4>üìã Th√¥ng tin thanh to√°n:</h4>
      <ul>
        <li><strong>S·ªë ti·ªÅn:</strong> ${new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(amount)}</li>
        <li><strong>M√£ giao d·ªãch:</strong> ${transactionId}</li>
        <li><strong>Th·ªùi gian:</strong> ${new Date().toLocaleString("vi-VN")}</li>
        <li><strong>Lo·∫°i thanh to√°n:</strong> Ti·ªÅn c·ªçc thu√™ nh√†</li>
      </ul>
    </div>

    <div class="details">
      <h4>üè† Th√¥ng tin ph√≤ng:</h4>
      <ul>
        <li><strong>Ph√≤ng:</strong> ${roomName}</li>
        <li><strong>T√≤a nh√†:</strong> ${accommodationName}</li>
        <li><strong>Ng√†y b·∫Øt ƒë·∫ßu thu√™:</strong> ${new Date(startDate).toLocaleDateString("vi-VN")}</li>
      </ul>
    </div>

    <div class="success-box">
      <h4>üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Vie Stay!</h4>
      <p>H·ª£p ƒë·ªìng thu√™ nh√† c·ªßa b·∫°n ƒë√£ c√≥ hi·ªáu l·ª±c t·ª´ ng√†y ${new Date(startDate).toLocaleDateString("vi-VN")}.</p>
    </div>

    ${
      landlordContact
        ? `
    <div class="details">
      <h4>üìû Th√¥ng tin li√™n h·ªá ch·ªß nh√†:</h4>
      <p>ƒê·ªÉ nh·∫≠n ch√¨a kh√≥a v√† ho√†n t·∫•t th·ªß t·ª•c nh·∫≠n ph√≤ng, vui l√≤ng li√™n h·ªá:</p>
      <ul>
        <li><strong>T√™n:</strong> ${landlordContact.name}</li>
        <li><strong>Email:</strong> ${landlordContact.email}</li>
        ${landlordContact.phone ? `<li><strong>ƒêi·ªán tho·∫°i:</strong> ${landlordContact.phone}</li>` : ""}
      </ul>
    </div>
    `
        : ""
    }

    <p><strong>L∆∞u √Ω quan tr·ªçng:</strong></p>
    <ul>
      <li>Vui l√≤ng l∆∞u l·∫°i email n√†y l√†m b·∫±ng ch·ª©ng thanh to√°n</li>
      <li>Li√™n h·ªá ch·ªß nh√† ƒë·ªÉ s·∫Øp x·∫øp th·ªùi gian nh·∫≠n ph√≤ng</li>
      <li>Mang theo CMND/CCCD khi nh·∫≠n ph√≤ng</li>
    </ul>
    
    <p>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† s·ª≠ d·ª•ng d·ªãch v·ª• Vie Stay!</p>
    
    <p>Tr√¢n tr·ªçng,<br><strong>ƒê·ªôi ng≈© Vie Stay</strong></p>
  </div>
  
  <div class="footer">
    <p>ƒê√¢y l√† email t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.</p>
    <p>N·∫øu c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá: support@viestay.com</p>
    <p>¬© ${new Date().getFullYear()} Vie Stay. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
  </div>
</body>
</html>
    `;
  }

  // Template cho email ho√†n th√†nh h·ª£p ƒë·ªìng
  generateContractCompletedTemplate(data) {
    const {
      tenantName,
      landlordName,
      roomName,
      accommodationName,
      startDate,
      endDate,
      monthlyRent,
      deposit,
      tenantContact,
      landlordContact,
    } = data;

    return `
<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>H·ª£p ƒë·ªìng ƒë√£ ho√†n th√†nh</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 600px;
      margin: 0 auto;
      padding: 20px;
    }
    .header {
      background: linear-gradient(to right, #28a745, #20c997);
      padding: 20px;
      text-align: center;
      color: white;
      border-radius: 5px 5px 0 0;
    }
    .content {
      background-color: #f9f9f9;
      padding: 20px;
      border-radius: 0 0 5px 5px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .success-box {
      background: #d4edda;
      border: 1px solid #c3e6cb;
      color: #155724;
      padding: 15px;
      border-radius: 5px;
      margin: 15px 0;
      text-align: center;
    }
    .details {
      background: white;
      padding: 15px;
      margin: 15px 0;
      border-radius: 5px;
      border-left: 4px solid #28a745;
    }
    .contact-box {
      background: #e8f4fd;
      border: 1px solid #bee5eb;
      padding: 15px;
      margin: 15px 0;
      border-radius: 5px;
    }
    .footer {
      text-align: center;
      margin-top: 20px;
      color: #888;
      font-size: 0.8em;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>üéâ H·ª£p ƒë·ªìng thu√™ nh√† ƒë√£ ho√†n th√†nh!</h1>
  </div>
  
  <div class="content">
    <div class="success-box">
      <h3>‚úÖ H·ª£p ƒë·ªìng ƒë√£ ƒë∆∞·ª£c k√Ω th√†nh c√¥ng!</h3>
      <p>C·∫£ hai b√™n ƒë√£ ho√†n t·∫•t vi·ªác k√Ω h·ª£p ƒë·ªìng thu√™ nh√†.</p>
    </div>
    
    <div class="details">
      <h4>üë• Th√¥ng tin c√°c b√™n:</h4>
      <ul>
        <li><strong>Ng∆∞·ªùi thu√™:</strong> ${tenantName}</li>
        <li><strong>Ch·ªß nh√†:</strong> ${landlordName}</li>
      </ul>
    </div>

    <div class="details">
      <h4>üè† Th√¥ng tin h·ª£p ƒë·ªìng:</h4>
      <ul>
        <li><strong>Ph√≤ng:</strong> ${roomName}</li>
        <li><strong>T√≤a nh√†:</strong> ${accommodationName}</li>
        <li><strong>Th·ªùi gian thu√™:</strong> ${new Date(startDate).toLocaleDateString("vi-VN")} - ${new Date(endDate).toLocaleDateString("vi-VN")}</li>
        <li><strong>Gi√° thu√™:</strong> ${new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(monthlyRent)}/th√°ng</li>
        <li><strong>Ti·ªÅn c·ªçc:</strong> ${new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(deposit)}</li>
      </ul>
    </div>

    <div class="contact-box">
      <h4>üìû Th√¥ng tin li√™n h·ªá:</h4>
      <div style="display: flex; justify-content: space-between; flex-wrap: wrap;">
        <div style="flex: 1; margin-right: 10px;">
          <h5>üë§ Ng∆∞·ªùi thu√™: ${tenantName}</h5>
          <ul style="list-style: none; padding: 0;">
            <li>üìß ${tenantContact?.email || "N/A"}</li>
            ${tenantContact?.phone ? `<li>üì± ${tenantContact.phone}</li>` : ""}
          </ul>
        </div>
        <div style="flex: 1; margin-left: 10px;">
          <h5>üè† Ch·ªß nh√†: ${landlordName}</h5>
          <ul style="list-style: none; padding: 0;">
            <li>üìß ${landlordContact?.email || "N/A"}</li>
            ${landlordContact?.phone ? `<li>üì± ${landlordContact.phone}</li>` : ""}
          </ul>
        </div>
      </div>
    </div>

    <div class="success-box">
      <h4>üìã C√°c b∆∞·ªõc ti·∫øp theo:</h4>
      <p><strong>D√†nh cho ng∆∞·ªùi thu√™:</strong></p>
      <ul style="text-align: left;">
        <li>Li√™n h·ªá ch·ªß nh√† ƒë·ªÉ s·∫Øp x·∫øp th·ªùi gian nh·∫≠n ph√≤ng</li>
        <li>Chu·∫©n b·ªã c√°c gi·∫•y t·ªù c·∫ßn thi·∫øt (CMND/CCCD)</li>
        <li>Thanh to√°n ti·ªÅn thu√™ th√°ng ƒë·∫ßu theo th·ªèa thu·∫≠n</li>
      </ul>
      
      <p><strong>D√†nh cho ch·ªß nh√†:</strong></p>
      <ul style="text-align: left;">
        <li>Chu·∫©n b·ªã ph√≤ng v√† trao ch√¨a kh√≥a</li>
        <li>H∆∞·ªõng d·∫´n ng∆∞·ªùi thu√™ c√°c quy ƒë·ªãnh c·ªßa t√≤a nh√†</li>
        <li>Trao ƒë·ªïi th√¥ng tin li√™n l·∫°c tr·ª±c ti·∫øp</li>
      </ul>
    </div>

    <p><strong>L∆∞u √Ω quan tr·ªçng:</strong></p>
    <ul>
      <li>H·ª£p ƒë·ªìng c√≥ hi·ªáu l·ª±c t·ª´ ng√†y ${new Date(startDate).toLocaleDateString("vi-VN")}</li>
      <li>B·∫£n h·ª£p ƒë·ªìng ƒë√£ k√Ω s·∫Ω ƒë∆∞·ª£c l∆∞u tr·ªØ an to√†n trong h·ªá th·ªëng</li>
      <li>C·∫£ hai b√™n c√≥ th·ªÉ t·∫£i xu·ªëng b·∫£n h·ª£p ƒë·ªìng t·ª´ t√†i kho·∫£n c√° nh√¢n</li>
      <li><strong>Li√™n h·ªá tr·ª±c ti·∫øp:</strong> Hai b√™n c√≥ th·ªÉ li√™n h·ªá qua th√¥ng tin email/s·ªë ƒëi·ªán tho·∫°i ·ªü tr√™n</li>
    </ul>
    
    <p>C·∫£m ∆°n c·∫£ hai b√™n ƒë√£ tin t∆∞·ªüng v√† s·ª≠ d·ª•ng d·ªãch v·ª• Vie Stay!</p>
    
    <p>Tr√¢n tr·ªçng,<br><strong>ƒê·ªôi ng≈© Vie Stay</strong></p>
  </div>
  
  <div class="footer">
    <p>ƒê√¢y l√† email t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.</p>
    <p>N·∫øu c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá: support@viestay.com</p>
    <p>¬© ${new Date().getFullYear()} Vie Stay. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
  </div>
</body>
</html>
    `;
  }

  // G·ª≠i email x√°c nh·∫≠n h·ª£p ƒë·ªìng
  async sendAgreementConfirmationEmail(tenantEmail, agreementData) {
    try {
      const mailOptions = {
        from: `"Vie Stay" <${process.env.AUTH_EMAIL}>`,
        to: tenantEmail,
        subject: "X√°c nh·∫≠n h·ª£p ƒë·ªìng thu√™ nh√†",
        html: this.generateAgreementConfirmationTemplate(agreementData),
      };

      const result = await this.transporter.sendMail(mailOptions);
      console.log(`‚úÖ Agreement confirmation email sent successfully to: ${tenantEmail}`);
      return { success: true, messageId: result.messageId };
    } catch (error) {
      console.error(`‚ùå Error sending agreement confirmation email: ${error}`);
      throw error;
    }
  }

  // G·ª≠i email ph·∫£n h·ªìi b√°o c√°o
  async sendReportResponseEmail(reportData) {
    try {
      const {
        userEmail,
        userFullname,
        reportId,
        reportType,
        reportMessage,
        reportDate,
        postTitle,
        postUrl,
        status,
        adminNote
      } = reportData;

      if (!userEmail) {
        console.log('‚ÑπÔ∏è No email provided, skipping email notification');
        return { success: false, message: 'No email provided' };
      }

      const emailTemplate = REPORT_RESPONSE_TEMPLATE
        .replace('{{userFullname}}', userFullname)
        .replace('{{reportId}}', reportId)
        .replace('{{reportType}}', this.getReportTypeText(reportType))
        .replace('{{reportMessage}}', reportMessage || 'Kh√¥ng c√≥')
        .replace('{{reportDate}}', new Date(reportDate).toLocaleDateString('vi-VN'))
        .replace('{{postTitle}}', postTitle)
        .replace('{{postUrl}}', postUrl)
        .replace('{{status}}', this.getStatusText(status))
        .replace('{{adminNote}}', adminNote || 'Kh√¥ng c√≥ ghi ch√∫ th√™m');

      const mailOptions = {
        from: process.env.AUTH_EMAIL,
        to: userEmail,
        subject: `[VieStay] Ph·∫£n h·ªìi b√°o c√°o #${reportId}`,
        html: emailTemplate,
      };

      const result = await this.transporter.sendMail(mailOptions);
      console.log('‚úÖ Report response email sent successfully to:', userEmail);
      return { success: true, messageId: result.messageId };
    } catch (error) {
      console.error('‚ùå Error sending report response email:', error);
      throw error;
    }
  }

  // H√†m h·ªó tr·ª£ cho b√°o c√°o
  getReportTypeText(type) {
    const types = {
      'scam': 'L·ª´a ƒë·∫£o',
      'duplicate': 'Tin tr√πng l·∫∑p', 
      'cant_contact': 'Kh√¥ng li√™n l·∫°c ƒë∆∞·ª£c',
      'fake': 'Tin gi·∫£',
      'other': 'Kh√°c'
    };
    return types[type] || type;
  }

  getStatusText(status) {
    const statuses = {
      'resolved': 'ƒê√£ x·ª≠ l√Ω',
      'rejected': 'T·ª´ ch·ªëi',
      'pending': 'ƒêang ch·ªù',
      'reviewing': 'ƒêang xem x√©t'
    };
    return statuses[status] || status;
  }

  // Ph∆∞∆°ng th·ª©c g·ª≠i email t·ªïng qu√°t
  async sendEmail({ to, subject, template, context, cc }) {
    try {
      let htmlContent;
      switch (template) {
        case "paymentSuccess":
          htmlContent = this.generatePaymentSuccessTemplate(context);
          break;
        case "contractSigning":
          htmlContent = this.generateContractSigningTemplate(context);
          break;
        case "agreementConfirmation":
          htmlContent = this.generateAgreementConfirmationTemplate(context);
          break;
        case "contractCompleted":
          htmlContent = this.generateContractCompletedTemplate(context);
          break;
        case "reportResponse":
          htmlContent = REPORT_RESPONSE_TEMPLATE
            .replace('{{userFullname}}', context.userFullname)
            .replace('{{reportId}}', context.reportId)
            .replace('{{reportType}}', this.getReportTypeText(context.reportType))
            .replace('{{reportMessage}}', context.reportMessage || 'Kh√¥ng c√≥')
            .replace('{{reportDate}}', new Date(context.reportDate).toLocaleDateString('vi-VN'))
            .replace('{{postTitle}}', context.postTitle)
            .replace('{{postUrl}}', context.postUrl)
            .replace('{{status}}', this.getStatusText(context.status))
            .replace('{{adminNote}}', context.adminNote || 'Kh√¥ng c√≥ ghi ch√∫ th√™m');
          break;
        default:
          throw new Error("Invalid email template");
      }

      const mailOptions = {
        from: `"Vie Stay" <${process.env.AUTH_EMAIL}>`,
        to,
        cc: cc || [],
        subject,
        html: htmlContent,
      };

      const result = await this.transporter.sendMail(mailOptions);
      console.log(`Email sent successfully: ${result.messageId}`);
      console.log(`Recipients: TO=${to}, CC=${cc ? cc.join(", ") : "none"}`);
      return result;
    } catch (error) {
      console.error("Error sending email:", error);
      throw error;
    }
  }
}

module.exports = new EmailService();